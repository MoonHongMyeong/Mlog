buildscript{
	ext{
		queryDslVersion = "4.4.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.3-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//	id 'com.github.node-gradle.node' version '2.2.4'
	id 'java'
}
//node plugin
//apply plugin: 'com.github.node-gradle.node'

group = 'me.portpolio'
version = '2.0-SNAPSHOT'+new Date().format("yyyyMMdd")
sourceCompatibility = '11'
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	//기본적인 스프링부트 웹, 테스트
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//JPA 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//devtools 추가
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//로컬 테스트용 h2 jdbc 추가
	runtimeOnly 'com.h2database:h2'
	//mysql jdbc 추가
	runtimeOnly 'mysql:mysql-connector-java'
	//lombok 추가
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	//unit test 를 위한 google truth 추가 구버전의 assertion 을 쓸 수 있다.
	testImplementation 'com.google.truth:truth:1.1'
	//querydsl 추가
	implementation ("com.querydsl:querydsl-jpa:${queryDslVersion}")
	annotationProcessor ("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
	testImplementation ("com.querydsl:querydsl-jpa:${queryDslVersion}")
	testAnnotationProcessor ("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
	//querydsl 그냥 추가하면 문제가 생긴다 java.lang.NoClassDefFoundError : javax/annotation/Generated
	//javax-annotation-api 의존성을 추가
	implementation("javax.annotation:javax.annotation-api:1.3.2")
	annotationProcessor("javax.annotation:javax.annotation-api:1.3.2")

	//OAUTH2.0 추가
	implementation ("org.springframework.boot:spring-boot-starter-oauth2-client")
	//Spring session 추가
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	//Spring security test 추가
	testImplementation("org.springframework.security:spring-security-test")

	//spring-cloud-aws 추가
	implementation 'org.springframework.cloud:spring-cloud-starter-aws'
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-aws:2.2.6.RELEASE'
	}
}

//querydsl Qclass 생성하는 장소 추가
def generated='src/main/generated'
sourceSets {
	main.java.srcDirs += [ generated ]
}
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}
clean.doLast {
	file(generated).deleteDir()
}

test {
	useJUnitPlatform()
}
